from typing import TypedDict, Annotated
from langgraph.graph import add_messages, StateGraph, END
from langchain_groq import ChatGroq
from langchain_core.messages import AIMessage, HumanMessage
from dotenv import load_dotenv
import os

# from langgraph.checkpoint.memory import MemorySaver
from langgraph.checkpoint.sqlite import SqliteSaver
import sqlite3


load_dotenv()

sqlite_conn=sqlite3.connect("checkpoint.sqlite", check_same_thread=False)  #not suggested by sqlite to
#bypass or disable check same thread.  This allows a thread to be used in another connection.

memory=SqliteSaver(sqlite_conn) #this is better memory because it is not stored in memory but in an external DB

GROQ_API_KEY = os.getenv("GROQ_API_KEY")


llm=ChatGroq(model="llama-3.1-8b-instant")

class BasicChatState(TypedDict):
    messages: Annotated[list,add_messages]

def chatbot(state:BasicChatState):
    return {
        "messages": [llm.invoke(state["messages"])]
    }

graph = StateGraph(BasicChatState)

graph.add_node("chatbot", chatbot)
graph.set_entry_point("chatbot")
graph.add_edge("chatbot", END)


app = graph.compile(checkpointer=memory)

config={"configurable": {"thread_id":1}}


while True:
    user_input = input("User: ")
    if user_input in ["end","exit","quit"]:
        break
    else:
        result = app.invoke({"messages": HumanMessage(content=user_input)}, 
                            config=config)

        print("AI: ", result["messages"][-1].content)